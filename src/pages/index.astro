---
import Layout from "../layouts/Layout.astro";
import Book from "../components/Book.astro";
import { THEMES } from "../data/themes";
import Spinner from "../components/Spinner.astro";
---

<Layout title="HistorAI">
  <main
    class="mx-5 my-10 md:mx-10 lg:mx-20 md:flex md:justify-center md:items-start"
  >
    <section class="mb-20 md:flex-[.4]">
      <h1 class="text-4xl font-bold text-center mb-10">
        ¡Bienvenido a <span
          class="bg-gradient-to-r from-emerald-900 from-2% to-emerald-400 text-transparent bg-clip-text"
          >HistorAI</span
        >!
      </h1>
      <p class="mt-4">
        Aquí, la <strong>imaginación</strong> no tiene límites. Con nuestra herramienta
        impulsada por <strong>inteligencia artificial</strong>, podrás dar vida
        a relatos únicos y fascinantes.
      </p>
      <p class="mt-4">
        Comienza eligiendo un <strong>tema</strong> que despierte tu curiosidad,
        y nuestra IA generará el inicio de una historia cautivadora. A medida que
        la trama se desarrolla, llegarás a momentos clave donde podrás <strong
          >tomar decisiones cruciales</strong
        >. En cada uno de estos puntos, se te presentarán tres opciones
        intrigantes que influirán en el rumbo de la narrativa. Escoge la que más
        te inspire y observa cómo la historia evoluciona de acuerdo a tus
        elecciones.
      </p>
      <p class="mt-4">
        ¡Prepárate para una <strong>experiencia narrativa interactiva</strong> donde
        tú eres el <strong>autor de tu propia historia</strong>!
      </p>

      <div class="mt-8">
        <label for="theme-select"> Elige una temática </label>
        <select
          id="theme-select"
          class="w-full bg-gray-600 border border-gray-600 text-sm rounded focus:ring-emerald-900 focus:border-emerald-900 p-2.5 hover:cursor-pointer"
        >
          <option disabled selected value="">Selecciona una temática</option>
          {
            THEMES.map((theme) => (
              <option value={theme.id}>{theme.name}</option>
            ))
          }
        </select>

        <button
          id="submit-button"
          class="w-full bg-emerald-900 mt-4 hover:bg-emerald-950 focus:ring-4 focus:ring-emerald-500 font-medium rounded text-sm text-center px-5 py-2.5 disabled:bg-gray-400 disabled:cursor-not-allowed disabled:hover:bg-gray-400"
          type="button"
          disabled
        >
          Enviar
        </button>
      </div>
    </section>
    <section class="md:flex-1">
      <Book />
      <Spinner />
    </section>
  </main>

  <style>
    strong {
      @apply text-emerald-600;
    }
  </style>

  <script>
    import { THEMES } from "../data/themes";
    import type {
      Theme,
      Message,
      Option,
      History,
    } from "../interfaces/interfaces";

    let selectedTheme: Theme | undefined;
    let messages: Message[] = [];

    const storyText = document.querySelector("#story-text") as HTMLElement;
    const spinner = document.querySelector("#spinner") as HTMLElement;

    const optionsContainer = document.querySelector(
      "#options-container"
    ) as HTMLButtonElement;
    const themeSelect = document.querySelector(
      "#theme-select"
    ) as HTMLSelectElement;
    const submitButton = document.querySelector(
      "#submit-button"
    ) as HTMLButtonElement;

    themeSelect.addEventListener("change", () => {
      submitButton.disabled = !themeSelect.value;
    });

    submitButton.addEventListener("click", () => {
      const selectedThemeValue = themeSelect.value;
      if (!selectedThemeValue) return;

      selectedTheme = THEMES.find((theme) => theme.id === selectedThemeValue);
      messages = [
        {
          role: "user",
          content: `El tema elegido es: ${selectedTheme?.name}`,
        },
      ];

      submitButton.disabled = true;
      submitButton.textContent = "Generando historia...";

      doRequest();
    });

    function formatHistory(history: string | string[]) {
      return Array.isArray(history)
        ? history
            .map((paragraph) => `<p class="mt-4">${paragraph}</p>`)
            .join("")
        : `<p class="mt-4">${history}</p>`;
    }

    function showOptions(options: Option[]) {
      optionsContainer.innerHTML = options
        .map(
          (option) =>
            `<button class="option-button mt-2 px-4 py-2 bg-emerald-900 rounded" data-id="${option.id.toString()}">${option.text}</button>`
        )
        .join("");

      document.querySelectorAll(".option-button").forEach((button) => {
        button.addEventListener("click", (event) => {
          const selectedOptionId = (event.target as HTMLElement).getAttribute(
            "data-id"
          );

          if (selectedOptionId) {
            const selectedOption = options.find(
              (option) => option.id.toString() == selectedOptionId
            );

            messages.push({
              role: "user",
              content: `Elijo la opción: ${selectedOption?.text}`,
            });

            submitButton.disabled = true;

            doRequest();
          }
        });
      });
    }

    async function doRequest() {
      try {
        spinner.classList.remove("hidden");

        const response = await fetch("/api/generate-story", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ messages }),
        });

        if (!response.ok) {
          throw new Error("Error al generar la continuación de la historia");
        }

        const { history, options }: History = await response.json();
        storyText.innerHTML += formatHistory(history);
        showOptions(options);
      } catch (error) {
        console.error("Error:", error);
        alert(
          "Hubo un error al generar la continuación de la historia. Por favor, intenta de nuevo."
        );
      } finally {
        submitButton.disabled = false;
        submitButton.textContent = "Enviar";
        spinner.classList.add("hidden");
      }
    }
  </script>
</Layout>
